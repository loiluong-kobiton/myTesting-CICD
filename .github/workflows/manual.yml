# This is a basic workflow that is manually triggered

name: Manual workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      name:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'test run yarn test'
        # Default value if no value is explicitly provided
        default: 'World'
        # Input has to be provided for the workflow to run
        required: true
        # The data type of the input
        type: string

      test-file:
        description: 'Test file '
        default: 'empty'
        required: false
        type: string
      
      node-version:
        description: 'Node version'
        # default: 'no test'
        type: choice
        options:
          - 16.x
          - 14.x
          - 18.x


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "greet"
  greet:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
      contents: write

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Runs a single command using the runners shell
      - name: Send greeting
        run: echo "Hello ${{ inputs.name }}"

      - name: Clone repo (Latest)
        uses: actions/checkout@v3



      - name: Install Node.js ${{ inputs.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ github.event.inputs.node-version}}
      
      - name: check coverage
        # uses: ArtiomTr/jest-coverage-report-action@v2
        # with:
        #   test-script: yarn jest
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.TEST_TOKEN }}
          script: |
            const { data: commits } = await github.rest.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              pull_number: context.payload.pull_request.number
            });
            const commit = commits[0];
            const coverageResult = `The test result is: ${process.env.CI ? 'success' : 'failure'}`;
            const comment = `Test result for commit ${commit.sha.substr(0, 7)}:\n\n${coverageResult}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: commit.commit.message,
              body: comment,
            });
